name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "SenhaSegura123!"
        ports:
          - 1433:1433
        options: > 
          --network-alias sqlserver

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Install dotnet-ef tool
        run: dotnet tool install --global dotnet-ef

      - name: Build the Docker image API
        run: docker build . --file Dockerfile --tag my-image-api:latest

      - name: Create appsettings.json
        run: |
          mkdir -p Infrastructure  # Cria o diretório, se não existir
          echo '{
            "ConnectionStrings": {
              "DefaultConnection": "Server=localhost,1433;Database=TestDb;User Id=sa;Password=SenhaSegura123!;TrustServerCertificate=True"
            }
          }' > Infrastructure/appsettings.json

      - name: Wait for SQL Server to be ready
        run: |
          for i in {30..0}; do
            if echo 'SELECT 1' | /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'SenhaSegura123!' > /dev/null; then
              echo 'SQL Server is ready!'
              break
            fi
            echo 'SQL Server is starting...'
            sleep 2  # Aumenta o tempo de espera
          done

      - name: Create and apply database migrations
        run: |
          export PATH="$PATH:$HOME/.dotnet/tools"  # Adiciona o caminho das ferramentas dotnet ao PATH
          dotnet ef database update --project Infrastructure

      - name: Install mssql-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Insert initial data into the database
        run: |
          echo 'INSERT INTO Papel (Tipo) VALUES ("Administrador"), ("Usuario");' | /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'SenhaSegura123!' -d TestDb
          echo 'INSERT INTO Regiao (Name) VALUES ("Regiao 1"), ("Regiao 2");' | /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'SenhaSegura123!' -d TestDb
          echo 'INSERT INTO TipoTelefone (Tipo) VALUES ("Celular"), ("Fixo");' | /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'SenhaSegura123!' -d TestDb
          echo 'INSERT INTO Usuario (Name, Email, Password, RoleId) VALUES ("Usuario 1", "joao.silva@exemplo.com", "senha1", 1);' | /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'SenhaSegura123!' -d TestDb

      - name: Run tests
        env:
          ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=TestDb;User Id=sa;Password=SenhaSegura123!" 
        run: |
          dotnet restore Testes/Testes.csproj  # Garante que as dependências estão atualizadas
          dotnet test Testes/Testes.csproj --logger "trx;LogFileName=test_results.trx"  # Executa todos os testes do projeto de testes

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Tag API Image for Docker Hub
        run: docker tag my-image-api:latest ${{ secrets.DOCKER_HUB_USERNAME }}/my-image-api:latest
        
      - name: Push API Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-image-api:latest
